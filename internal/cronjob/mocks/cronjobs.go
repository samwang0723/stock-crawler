// Code generated by MockGen. DO NOT EDIT.
// Source: cronjob.go

// Package cronjob is a generated GoMock package.
package cronjob

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCronjob is a mock of Cronjob interface.
type MockCronjob struct {
	ctrl     *gomock.Controller
	recorder *MockCronjobMockRecorder
}

// MockCronjobMockRecorder is the mock recorder for MockCronjob.
type MockCronjobMockRecorder struct {
	mock *MockCronjob
}

// NewMockCronjob creates a new mock instance.
func NewMockCronjob(ctrl *gomock.Controller) *MockCronjob {
	mock := &MockCronjob{ctrl: ctrl}
	mock.recorder = &MockCronjobMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCronjob) EXPECT() *MockCronjobMockRecorder {
	return m.recorder
}

// AddJob mocks base method.
func (m *MockCronjob) AddJob(ctx context.Context, spec string, job func()) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddJob", ctx, spec, job)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddJob indicates an expected call of AddJob.
func (mr *MockCronjobMockRecorder) AddJob(ctx, spec, job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddJob", reflect.TypeOf((*MockCronjob)(nil).AddJob), ctx, spec, job)
}

// Start mocks base method.
func (m *MockCronjob) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockCronjobMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockCronjob)(nil).Start))
}

// Stop mocks base method.
func (m *MockCronjob) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockCronjobMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockCronjob)(nil).Stop))
}
