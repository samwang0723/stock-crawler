parameters:
  workspace_directory:
    type: string
    default: "/home/circleci/app"
  app_name:
    type: string
    default: "stock-crawler"

version: 2.1

# Enable dynamic workflows
setup: true

orbs:
  aws-ecr: circleci/aws-ecr@8.1.2
  aws-eks: circleci/aws-eks@2.2.0
  aws-cli: circleci/aws-cli@3.1.1
  kubernetes: circleci/kubernetes@1.3.1
  path-filtering: circleci/path-filtering@0.1.3

executors:
  default-executor:
    docker:
      - image: cimg/base:stable
    working_directory: << pipeline.parameters.workspace_directory >>
  go-executor:
    docker:
      - image: cimg/go:1.19
    working_directory: << pipeline.parameters.workspace_directory >>
  test-executor:
    machine:
      image: ubuntu-2204:2022.04.1
      docker_layer_caching: true
    working_directory: << pipeline.parameters.workspace_directory >>
  docker-publisher:
    environment:
      IMAGE_NAME: samwang0723/stock-crawler
    docker: # Each job requires specifying an executor
      # (either docker, macos, or machine), see
      - image: circleci/node:latest
    auth:
      username: ${DOCKERHUB_USERNAME}
      password: ${DOCKERHUB_PASSWORD}
    working_directory: << pipeline.parameters.workspace_directory >>

commands:
  docker-build:
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - add_ssh_keys # WARNING: DO NOT ADD A DEPLOY KEY DIRECTLY FROM circleci, create in github and add the ssh_key manually, otherwise it won't be injected here
      - run: make docker-build

  ecr-push:
    parameters:
      image-name:
        type: string
        description: "ecr url / app name (for ex 123456123456.dkr.ecr.ap-southeast-1.amazonaws.com/app-<< pipeline.parameters.app_name >>)"
      image-tag:
        type: string
        description: can be a tag (v1.0.1) or a commit sha1 ("${CIRCLE_SHA1}") for example
    steps:
      # TODO: not using aws-ecr v8.1.2 for now, there is a bug it didn't use the latest aws-cli will cause issue for getting the env for role arn, related issue https://github.com/CircleCI-Public/aws-ecr-orb/issues/203
      # - aws-ecr/ecr-login:
      #     assume-web-identity: true
      #     region: ${AWS_ECR_REGION}
      #     role-arn: ${AWS_ECR_ROLE_ARN}
      #     role-session-name: 'CircleCI-${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BUILD_NUM}'
      #     registry-id: AWS_ECR_REGISTRY_ID
      - aws-cli/setup:
          role-arn: ${AWS_ECR_ROLE_ARN}
          role-session-name: 'CircleCI-${CIRCLE_PROJECT_REPONAME}-${CIRCLE_BUILD_NUM}'
          profile-name: 'circleci-pull-profile'
          aws-region: AWS_REGION
      - run:
          name: Check Identity
          command: |
            aws sts get-caller-identity --profile circleci-pull-profile
      - run:
          name: Check docker login
          command: |
            aws ecr get-login-password --region ${AWS_ECR_REGION} --profile circleci-pull-profile | docker login --username AWS --password-stdin ${AWS_ECR_ACCOUNT_URL}
      - run:
          name: "tag and push image"
          command: |
            docker tag << pipeline.parameters.app_name >> << parameters.image-name >>:<< parameters.image-tag >>
            docker push << parameters.image-name >>:<< parameters.image-tag >>

jobs:
  linter:
    executor: go-executor
    steps:
      - restore_cache:
          key:  golangci-lint-cache
      - checkout
      - run:
          name: Install golangci-lint/run-lint
          command: |
            curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.48.0
      - run:
          name: Install gofumpt
          command: |
            go install mvdan.cc/gofumpt@latest
      - run:
          name: Linter check
          command: |
            make lint
      - save_cache:
          key: golangci-lint-cache
          paths:
            - /home/circleci/.cache/golangci-lint

  test:
    executor: test-executor
    steps:
      - restore_cache:
          key:  go-cache
      - checkout
      - run: go mod download
      - run: go install github.com/mattn/goveralls@latest
      - run: go test -v  ./... -cover -race -covermode=atomic -coverprofile=./coverage.out
      - run: goveralls -covermode=atomic -coverprofile=./coverage.out -service=circle-ci -repotoken=$COVERALLS_TOKEN
      - save_cache:
          key: go-cache
          paths:
            - /home/circleci/.cache/go-build

  sec-scan:
    executor: go-executor
    steps:
      - checkout
      - run: curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b $(go env GOPATH)/bin v0.30.4
      - run:
          name: Trivy sec scan
          command: |
            make sec-scan

  conv-commits-check:
    executor: default-executor
    steps:
      - checkout
      - run:
          name: Install cog
          command: |
            mkdir -p "$HOME/.local/bin" || exit
            VERSION=5.1.0
            TAR="cocogitto-$VERSION-x86_64-unknown-linux-musl.tar.gz"
            cd "$HOME/.local/bin" || exit
            curl -OL https://github.com/cocogitto/cocogitto/releases/download/"$VERSION"/"$TAR"
            tar xfz $TAR
      - run:
          name: cog check of conventional commits
          shell: /bin/bash
          command: |
            cog check --from-latest-tag --ignore-merge-commits

  docker-build-tag-push:
    docker:
      - image: cimg/base:stable
    parameters:
      ecr-repo-uri:
        type: string
        description: aws ecr region
    steps:
      - docker-build
      - ecr-push:
          image-name: "<< parameters.ecr-repo-uri >>"
          image-tag: "${CIRCLE_TAG:-$CIRCLE_SHA1}"

  docker-publish-to-hub:
    executor: docker-publisher
    steps:
      - run:
          name: publish docker image to DockerHub
          command: |
            echo “${DOCKERHUB_PASSWORD}” | docker login -u “${DOCKERHUB_USERNAME}” - password-stdio
            docker build -t $IMAGE_NAME .
            docker push ${IMAGE_NAME}:latest

workflows:
  version: 2
  docker-build-tag-push-deploy:
    jobs:
      - linter:
          filters:
            tags:
              only: /.*/
      - test:
          filters:
            tags:
              only: /.*/
      - sec-scan:
          filters:
            tags:
              only: /.*/
      - conv-commits-check:
          filters:
            tags:
              only: /.*/
      - docker-build-tag-push:
          # NOTE: adding context to trigger cricleci add OIDC token, related doc: https://circleci.com/docs/openid-connect-tokens
          context: slack-notification
          ecr-repo-uri: ${AWS_ECR_REPO_URI}
          requires:
            - linter
            - test
            - sec-scan
            - conv-commits-check
          filters:
            tags:
              only: /.*/
            branches:
              only:
                - master
      - path-filtering/filter:
          name: dynamic-workflows
          base-revision: master
          mapping: |
            deploy/develop/.* dev-changed true
            deploy/staging/.* sta-changed true
            deploy/master/.* pro-changed true
            internal/docs/swagger.json api-changed true
          config-path: .circleci/dynamic-workflows.yaml
          filters:
            tags:
              only: /.*/
          requires:
            - docker-build-tag-push
